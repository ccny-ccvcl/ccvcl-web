{"id":946,"date":"2020-02-26T17:03:38","date_gmt":"2020-02-26T22:03:38","guid":{"rendered":"http:\/\/ccvcl.org\/?page_id=946"},"modified":"2020-03-11T10:44:23","modified_gmt":"2020-03-11T14:44:23","slug":"computer-vision-spring-2020-assignment-2","status":"publish","type":"page","link":"http:\/\/ccvcl.org\/computer-vision-and-image-processing-spring-2020\/computer-vision-spring-2020-assignment-2\/","title":{"rendered":"Computer Vision Spring 2020 \u2013 Assignment 2"},"content":{"rendered":"\n<p>Computer Science \u2013 The CUNY Graduate Center<br><strong>Computer Vision and Image Processing<br>Assignment 2 ( Deadline: 03\/13 Friday before midnight)<\/strong><br>===============================================================<br>Note: All the writings of your assignment must be in \u201csoft\u201d copies (in a single PDF file)\u00a0 by sending\u00a0 to Prof. Zhu &lt;cv.zhu.ccny@gmail.com> via an email attachment. You are responsible for the lose of your submissions if you don\u2019t include\u00a0 \u201c<strong>GC 74030-1\u2033\u00a0<\/strong>or<strong>\u00a0\u201cCNS 80300-1<\/strong>\u201d (exactly) in the\u00a0<strong>subject\u00a0<\/strong>of your email. For your programming part, in addition to the writing report, please also send your source code\u00a0 \u2013 in their original formats; please don\u2019t format them into PDF or Word formats. Please don\u2019t send in your images and executable.\u00a0 You may want to include images, tables, etc in your report as they show results of your work. Do write your names and IDs (last four digits) in both files for your report and the code. <strong><em>(Those marked with * are optional for extra credits)<\/em><\/strong><\/p>\n\n\n\n<p>1&nbsp;&nbsp; (Camera Models- 20 points)&nbsp; Prove that the vector from the viewpoint of a pinhole camera to the vanishing point (in the image plane) of a set of 3D parallel lines is parallel to the direction of the parallel lines. Please show steps of your proof.<\/p>\n\n\n\n<p><strong>Hint:<\/strong>&nbsp;You can either use geometric reasoning or algebraic calculation.&nbsp;<\/p>\n\n\n\n<p>If you choose to use geometric reasoning, you can use the fact that the projection of a 3D line in space is the intersection of its \u201cinterpretation plane\u201d with the image plane.&nbsp; Here the interpretation plane (IP) is a plane passing through the 3D line and the center of projection (viewpoint) of the camera.&nbsp; Also, the interpretation planes of two parallel lines intersect in a line passing through the viewpoint, and the intersection line is parallel to the parallel lines.<\/p>\n\n\n\n<p>If you select to use algebraic calculation, you may use the parametric representation of a 3D line: P = P0 +tV, where P= (X,Y,Z)<sup>T<\/sup>&nbsp;is any point on the line (here&nbsp;&nbsp;<sup>T<\/sup>&nbsp;denote for transpose),&nbsp;&nbsp; P0 = (X0,Y0,Z0)<sup>T<\/sup>&nbsp;is a given fixed point on the line, vector V = (a,b,c)<sup>T<\/sup>&nbsp;represents the direction of the line, and t is the scalar parameter that controls the distance (with sign) between P and P0.<\/p>\n\n\n\n<p>2. (Camera Models- 20 points) Show that relation between any image point (xim, yim)<sup>T<\/sup>&nbsp;of a plane (in the form of&nbsp;(x1,x2,x3)<sup>T<\/sup>&nbsp;in projective space ) and its corresponding point (Xw, Yw, Zw)<sup>T<\/sup>&nbsp;on the plane in 3D space can be represented by a 3\u00d73 matrix. You should start from the general form of the camera model (x1,x2,x3)<sup>T<\/sup>&nbsp;= M<sub>int<\/sub>M<sub>ext<\/sub>(Xw, Yw, Zw, 1)<sup>T<\/sup>, where the image center (ox, oy), the focal length f, the scaling factors( sx and sy), &nbsp;the rotation matrix R and the translation vector T are all unknown. Note that in the course slides and the lecture notes, I used a simplified model of the perspective project by assuming ox and oy are known and sx = sy =1, and only discussed the special cases of planes.. So you cannot directly copy those equations I used.&nbsp; Instead you should use the general form of the projective matrix, and the&nbsp; general form of a plane n<sub>x<\/sub>&nbsp;X<sub>w<\/sub>&nbsp;+ n<sub>y<\/sub>&nbsp;Y<sub>w<\/sub>&nbsp;+ n<sub>z<\/sub>&nbsp;Z<sub>w<\/sub>&nbsp;&nbsp;= d.&nbsp;<\/p>\n\n\n\n<p>3.&nbsp;&nbsp;(Calibration- 20 points )&nbsp; Prove the Orthocenter Theorem by geometric arguments: Let T be the triangle on the image plane defined by the three vanishing points of three mutually orthogonal sets of parallel lines in space. Then the image center is the orthocenter of the triangle T (i.e., the common intersection of the three altitudes.&nbsp;<br>(1)&nbsp;&nbsp;&nbsp; Basic proof: use the result of Question 1, assuming the aspect ratio of the camera is 1. (10 points)<br>(2)&nbsp;&nbsp;&nbsp; If you do not know the&nbsp; focal length of the camera, can you still find the image center (together with the focal length) using the Orthocenter Theorem?&nbsp;<strong>Show why or why not.<\/strong>&nbsp;(5 points)<br>(3)&nbsp;&nbsp;&nbsp; If you do not know the aspect ratio and the focal length of the camera, can you still find the image center using the Orthocenter Theorem?&nbsp;<strong>Show why or why not.<\/strong>&nbsp;(5 points)<\/p>\n\n\n\n<p><br>4. Calibration Programming Exercises (40 points): Implement the direct parameter calibration method in order to (1) learn how to use SVD to solve systems of linear equations; (2) understand the physical constraints of the camera parameters; and (3) understand important issues related to calibration, such as calibration pattern design, point localization accuracy and robustness of the algorithms. Since calibrating a real camera involves lots of work in calibration pattern design, image processing and error controls as well as solving the equations, we will mainly use simulated data to understand the algorithms.&nbsp;&nbsp;As a by-product we will also learn how to generate 2D images from 3D models using a \u201cvirtual\u201d pinhole camera.<\/p>\n\n\n\n<ol><li>Calibration pattern \u201cdesign\u201d. Generate data of a \u201cvirtual\u201d 3D cube similar to the one shown in&nbsp;<a href=\"http:\/\/ccvcl.org\/wp-content\/uploads\/2019\/10\/calibrationpattern.gif\">here<\/a>&nbsp;of the lecture notes in camera calibration. For example, you can hypothesize a 1x1x1 m<sup>3<\/sup>&nbsp;cube and pick up coordinates of 3-D points on one corner of each black square in your world coordinate system. Make sure that your data is sufficient for the following calibration procedures. In order to show the correctness of your data, draw your cube (with the control points marked) using Matlab (or whatever tools you are selecting). I have provided a piece of&nbsp;<a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSCI6716-2018s\/Homework\/calib.m\">starting code<\/a>&nbsp;in Matlab for you to use.<\/li><li>\u201cVirtual\u201d camera and images. Design a \u201cvirtual\u201d camera with known intrinsic parameters including focal length f, image center (o<sub>x<\/sub>, o<sub>y<\/sub>) and pixel size (s<sub>x<\/sub>, s<sub>y<\/sub>).&nbsp;&nbsp;As an example, you can assume that the focal length is f = 16 mm, the image frame size is 512*512 (pixels) with (o<sub>x<\/sub>,o<sub>y<\/sub>) = (256, 256), and the size of the image sensor&nbsp;&nbsp;inside your camera is 8.8 mm *6.6 mm (so the pixel size is (s<sub>x<\/sub>,s<sub>y<\/sub>) = (8.8\/512, 6.6\/512) ). Capture an image of your \u201cvirtual\u201d calibration cube with your virtual camera in a given pose (R and T).&nbsp;&nbsp;For example, you can take the picture of the cube 4 meters away and with a tilt angle of 30 degree. Use three rotation angles&nbsp;alpha, beta, gamma&nbsp;to generate the rotation matrix R (refer to the lecture notes in camera model).&nbsp;&nbsp;You may need to try different pose in order to have a suitable image of your calibration target.<\/li><li>Direction calibration method: Estimate the intrinsic (f<sub>x<\/sub>, f<sub>y<\/sub>, aspect ratio&nbsp;a, image center (o<sub>x<\/sub>,o<sub>y<\/sub>) ) and extrinsic (R, T and further&nbsp;alpha, beta, gamma) parameters. Use SVD to solve the homogeneous linear system and the least square problem, and to enforce the orthogonality constraint on the estimate of R.&nbsp;<\/li><\/ol>\n\n\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use the accurately simulated data (both 3D world coordinates and 2D image coordinates) to the algorithms, and compare the results with the \u201cground truth\u201d data (which are given in step (a) and step (b)).&nbsp;&nbsp;Remember you are practicing a camera calibration, so you should pretend you know nothing about the camera parameters (i.e. you cannot use the ground truth data in your calibration process). However, in the direct calibration method, you could use the knowledge of the image center (in the homogeneous system to find extrinsic parameters) and the aspect ratio (in the Orthocenter theorem method to find image center).&nbsp;<\/p>\n\n\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ii.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Study whether the unknown aspect ratio matters in estimating the image center, and how the initial estimation of image center affects the estimating of the remaining parameters.&nbsp;&nbsp;Give a solution to solve the problems if any.<\/p>\n\n\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;iii.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Accuracy Issues. Add in some random noises to the simulated data and run the calibration algorithms again. See how the \u201cdesign tolerance\u201d of the calibration target and the localization errors of 2D image points affect the calibration accuracy. For example, you can add 0.1 mm random error to 3D points and 0.5 pixel random error to 2D points. Also analyze how sensitive of the Orthocenter method is to the extrinsic parameters in imaging the three sets of the orthogonal parallel lines.&nbsp;<strong>(* extra points:10<\/strong>)<br><\/p>\n\n\n\n<p>In all of the steps, you should give you results using either tables or graphs, or both of them.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Computer Science \u2013 The CUNY Graduate CenterComputer Vision and Image ProcessingAssignment 2 ( Deadline: 03\/13 Friday before midnight)===============================================================Note: All the writings of your assignment must be in \u201csoft\u201d copies (in&hellip;<\/p>\n","protected":false},"author":3,"featured_media":0,"parent":849,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"page-templates\/fullwidth.php","meta":{"footnotes":""},"_links":{"self":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/946"}],"collection":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/comments?post=946"}],"version-history":[{"count":6,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/946\/revisions"}],"predecessor-version":[{"id":997,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/946\/revisions\/997"}],"up":[{"embeddable":true,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/849"}],"wp:attachment":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/media?parent=946"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}
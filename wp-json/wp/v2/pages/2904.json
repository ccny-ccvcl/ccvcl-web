{"id":2904,"date":"2023-01-19T16:25:44","date_gmt":"2023-01-19T21:25:44","guid":{"rendered":"http:\/\/ccvcl.org\/?page_id=2904"},"modified":"2023-04-26T22:43:54","modified_gmt":"2023-04-27T02:43:54","slug":"csc-212-assignment-1-spring-2023","status":"publish","type":"page","link":"http:\/\/ccvcl.org\/csc-212-assignment-1-spring-2023\/","title":{"rendered":"CSc 212 Assignment 1- Spring 2023"},"content":{"rendered":"\n<p><strong>Computer Science City&nbsp;College of New York<\/strong><br>&nbsp; CSc 21200&nbsp;Data Structures, Spring 2023<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2 class=\"wp-block-heading\">Programming Assignment 1&nbsp; \u2013 Implement and Test the Statistician Class<\/h2>\n\n\n\n<p><strong>Modified from a Chapter 2 project at www.cs.colorado.edu\/~main\/projects\/<\/strong><br><strong>of Data Structures and Other Objects Using C++,&nbsp; Second Edition<\/strong><br><strong>by&nbsp;<a href=\"http:\/\/www.cs.colorado.edu\/~main\/\">Michael Main&nbsp;<\/a>and&nbsp;<a href=\"http:\/\/cseweb.ucsd.edu\/users\/savitch\/\">Walter Savitch<\/a><\/strong><\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<ul><li><strong>The Assignment:<\/strong>&nbsp;You will implement and test a small class called statistician, which is similar to some of the small classes in Chapter 2 of the text.<\/li><li><strong>Purposes:<\/strong>Ensure that you can write a small class that meets a&nbsp;<em>precise<\/em>&nbsp;specification.Make sure you understand how to write a class that is separated into a header file and an implementation file. Give you experience in using a test program to track down bugs in a class\u2019s implementation.<\/li><li><strong>Before Starting:<\/strong>&nbsp;Read all of Chapter 2. Know how to compile and run C++ programs on your system (Unix or Windows).<\/li><li><strong>Due Date:<\/strong>&nbsp;Thursday, Feb 09, 2023 before midnight. If you have problems, late work will be accepted before Friday with no penalties. Late work may be submitted on Saturday or Sunday with 5% penalty per day. No work will be accepted after&nbsp;Sunday.<\/li><li><strong>How to Turn In:<\/strong>&nbsp;Files to be submitted: source code (*.cpp, *.cxx, *.h)&nbsp; and the text file (a *.txt file or *.pdf file) showing the running output result of your implementation with the non-interactive test program&nbsp;<a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/statexam.cxx\">statsexam.cxx<\/a>&nbsp;(see below). Please don\u2019t send your executable files. Please submit your files to&nbsp;<a href=\"mailto:ds.zhu.ccny@gmail.com\">ds.zhu.ccny@gmail.com<\/a>, with the subject line \u201c<strong>CSc212 Assignment 1<\/strong>\u201c.<\/li><li><strong>Integrity Policy:&nbsp;<\/strong>Please don\u2019t forget to write your name and ID (last four digits) on top of each of your files (see below for files you need to turn in). Then under your name, please write this statement:&nbsp;<span class=\"has-inline-color has-vivid-green-cyan-color\">\u201cThe work in this assignment is my own. Any outside sources have been properly cited.\u201d<\/span>&nbsp;<span class=\"has-inline-color has-vivid-red-color\">Without writing this statement, you will not be able to get any score.<\/span><\/li><\/ul>\n\n\n\n<p><strong>Files that you must write or generate:<\/strong><\/p>\n\n\n\n<ol><li>stats.h:&nbsp;The header file for the new statistician class. Actually, you don\u2019t have to write much of this file. Just start with&nbsp;<a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/stats.h\">our version&nbsp;<\/a>and add your name and other information at the top. If some of your member functions are implemented as inline functions, then you may put those implementations in this file too.<\/li><li>stats.cxx:&nbsp;The implementation file for the new statistician class. You will write all of this file, which will have the implementations of all the statistician\u2019s member functions.<\/li><li>A text file (a *.txt file or *.pdf file) showing the running output result of your implementation with the non-interactive test program&nbsp;<a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/statexam.cxx\">statsexam.cxx<\/a>&nbsp;(see below).<\/li><\/ol>\n\n\n\n<p><strong>Other files that you may find helpful:<\/strong>&nbsp;&nbsp;&nbsp; You shall compile one of the following files with your stats.cxx and link them to generate your executable:<\/p>\n\n\n\n<ol><li><a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/stattest.cxx\">stattest.cxx:<\/a>&nbsp;A simple interactive test program for you to test your implementations.<\/li><li><a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/statexam.cxx\">statexam.cxx:<\/a>&nbsp;A non-interactive test program that will be used to grade the correctness of your statistician class.<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3 class=\"wp-block-heading\">The Statistician Class<br>Discussion of the Assignment<\/h3>\n\n\n\n<p>As indicated above, you will implement a new class called statistician, using a header file (most of which is written for you) and an implementation file (which you will write by yourself). The statistician is a class that is designed to keep track of simple statistics about a sequence of real numbers. There are two member functions that you should understand at an informal level before you proceed any further. The prototypes for these two functions are shown here as part of the statistician class declaration:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">&nbsp;&nbsp; class statistician<br>&nbsp;&nbsp; {<br>&nbsp;&nbsp; public:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void next(double r);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double mean( ) const;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>&nbsp;&nbsp; };<\/pre>\n\n\n\n<p>The member function \u201cnext\u201d is used to give a sequence of numbers to the statistician one at a time. The member function \u201cmean\u201d is a constant member function that returns the arithmetic mean (i.e., the average) of all the numbers that have been given to the statistician.<\/p>\n\n\n\n<p>Example: Suppose that you want a statistician to compute the mean of the sequence 1.1, 2.8, -0.9. Then you could write these statements:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">&nbsp;&nbsp; \/\/ Declares a statistician object called s<br>&nbsp;&nbsp; statistician s;&nbsp;<br><br>&nbsp;&nbsp; \/\/ Give the three numbers 1.1, 2.8 and -0.9 to the statistician<br>&nbsp;&nbsp; s.next(1.1);<br>&nbsp;&nbsp; s.next(2.8);<br>&nbsp;&nbsp; s.next(-0.9);<br><br>&nbsp;&nbsp; \/\/ Call the mean function, and print the result followed by a carriage return<br>&nbsp;&nbsp; cout &lt;&lt; s.mean( ) &lt;&lt; endl;<\/pre>\n\n\n\n<p>The output statement will print 1.0, since 1.0 is the mean of the three numbers 1.1, 2.8 and -0.9.<\/p>\n\n\n\n<p>Once you understand the workings of the next and mean member functions, you can look at the complete specification of the statistician class, which is in the file&nbsp;<a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/stats.h\">stats.h<\/a>&nbsp;. Notice that the statistician class in this file is part of a namespace called&nbsp;main_savitch_2C. You should use this namespace for your statistician. In this file you will find a precondition\/postcondition contract for all the statistician\u2019s member functions, including:<\/p>\n\n\n\n<ul><li>A default constructor, which merely does any initialization needed for the statistician to start its work<\/li><li>The next and mean functions, described above<\/li><li>A constant member function called length, which returns the count of how many numbers have been given to the statistician<\/li><li>Two constant member functions called minimum and maximum, which return the smallest and largest numbers that have been given to the statistician. (By the way, these two functions and the mean function all have a precondition that requires length( ) &gt; 0. You cannot use these three member functions unless the statistician has been given at least one number!)<\/li><li>A constant member function called sum, which returns the sum of all the numbers that have been given to the statistician. This function does NOT have a precondition. It may be called even if the statistician has NO numbers (in which case it should return 0).<\/li><li>An overloaded operator&nbsp;==&nbsp;which tests to see whether two statisticians are \u201cequal\u201d. The prototype is:<\/li><li>s.length( ) and t.length( ) are both 4<\/li><li>s.mean( ) and t.mean( ) are both 2.5<\/li><li>s.sum( ) and t.sum( ) are both 10.0<\/li><li>s.minimum( ) and t.minimum are both 1<\/li><li>s.maximum( ) and t.maximum are both 4<\/li><li>An overloaded + operator which has two statisticians as arguments, and returns a third statistician, as shown in this prototype:<\/li><li>An overloaded * operator which allows you to \u201cmultiply\u201d a double number times a statistician. Here is the prototype:<\/li><\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">Hints and Frequently Asked Questions<\/h3>\n\n\n\n<p><strong>The Private Member Variables<\/strong><\/p>\n\n\n\n<p>Carefully read the class definition in&nbsp;<a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/stats.h\">stats.h<\/a>. Notice how the private member variables are being used to keep track of information about the statistician\u2019s sequence of numbers. The statistician does NOT keep track of all the numbers in the sequence. There is no need to do so, and trying to do so can get you into trouble. Instead, it keeps track of only the information that is relevant to its member functions: How many numbers have been seen? What is the sum of those numbers? If you have seen at least one number, then what are the smallest and largest numbers that you\u2019ve seen so far? These four items should be your only private member variables.Be careful about how you set the private member variable that keeps track of the smallest number. My suggestion is that you do NOT have the constructor initialize this member variable (because when the constructor does its work, there have not yet been any numbers, so there is no smallest number).  But part of the work of the \u201cnext\u201d function is to correctly maintain the private member variables. This means that the first time that the next function is called, it should set the private member variable that keeps track of smallest values. Later, if next is called again with a smaller number, then the next function will change the member variable that is keeping track of the smallest value. (You\u2019ll have a similar process for the member variable that\u2019s keeping track of the largest value).<\/p>\n\n\n\n<p><strong>Check Boundary Values<\/strong><\/p>\n\n\n\n<p>Make sure that your + and * operators work correctly when the arguments are statisticians with no numbers.<\/p>\n\n\n\n<p><strong>Check Preconditions<\/strong><\/p>\n\n\n\n<p>Your implementations should use the assert function to check preconditions of all functions.<\/p>\n\n\n\n<p><strong>Input and Output<\/strong><\/p>\n\n\n\n<p>Your implementations must NOT produce any output to cout, nor expect any input from cin. All the interaction with the member functions occurs through their parameters.<\/p>\n\n\n\n<p><strong>Implement and Test Small Pieces<\/strong><\/p>\n\n\n\n<p>Don\u2019t tackle to whole project at once. Start by implementing what you can, using \u201cstubs\u201d for the harder functions. A \u201cstub\u201d is the implementation of a function with the lines of the body omitted. For example:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">&nbsp;&nbsp;&nbsp; void statistician::next(double r)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/\/ This is just a stub, to be implemented later.<br>&nbsp;&nbsp;&nbsp; }<\/pre>\n\n\n\n<p>A first implementation might have only:<\/p>\n\n\n\n<ul><li>The constructor<\/li><li>A simple version of next that increments the private member variable to keep track of how many numbers have been seen<\/li><li>The length function<\/li><\/ul>\n\n\n\n<p>Even with just stubs, your stats.cxx file will correctly compile and link with the interactive test program,&nbsp;<a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/stattest.cxx\">stattest.cxx<\/a>. For example, if you are using the g++ compiler with Linux in our student labs, you would compile and link the stattest program with these three commands:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">&nbsp;&nbsp;&nbsp; g++ -Wall -c stats.cxx<br>&nbsp;&nbsp;&nbsp; g++ -Wall -c stattest.cxx<br>&nbsp;&nbsp;&nbsp; g++ stattest.o stats.o -o stattest<\/pre>\n\n\n\n<p><strong>Frequently Asked Questions<\/strong><\/p>\n\n\n\n<p>1. I run the stattest (or statexam) and the program crashes with a failed assertion. Is it a good idea to remove the assertions (which I put in stats.cxx to check preconditions).<br><strong>ANSWER: <\/strong>No, leave those preconditions in there! The TA will clobber you (and I will too) if you delete the checks of the preconditions. Instead, you must find out where one of your functions is violating a precondition. Here is a typical example: Some students started by implementing the operator == along these lines:<\/p>\n\n\n\n<p><span class=\"has-inline-color has-vivid-purple-color\">bool operator == (const statistician&amp; s1, const statistician&amp; s2)<br>{<br>return<br>(s1.length( ) == s2.length( ))<br>&amp;&amp;<br>(s1.sum( ) == s2.sum( ))<br>&amp;&amp;<br>(s1.minimum( ) == s2.minimum( ))<br>&amp;&amp;<br>(s1.maximum( ) == s2.maximum( )<\/span>);<br>}<br>The problem with this implementation is that the operator == is allowed to be called even if s1 or s2 or both are empty. In such a case, the function will eventually get down to the test (s1.minimum( ) == s2.minimum( )) and\u2026assertion failed! because you cannot call minimum for an empty statistician.<br>How do you fix this problem? In your operator == you should start with a test to see whether s1 or s2 is empty (and handle those cases in a way that does not call minimum() or maximum() ).<\/p>\n\n\n\n<p><strong>MORAL<\/strong>: The functions you write can call other functions, but they must be careful to not violate preconditions.<\/p>\n\n\n\n<p>2. How should my constructor initialize the private member variables tiniest and largest?<br><strong>ANSWER<\/strong>: There are several solutions. One idea is to not initialize them at all. In this case, you must be careful to make sure of two things: (A) When the first number is given to the next function, it puts that first number into both tiniest and largest. (B) None of the other functions ever try to use tiniest or largest for an empty statistician.<\/p>\n\n\n\n<p>3. What other functions might need special cases for an empty statistician?<br><strong>ANSWER<\/strong>: Well, any function that accesses tiniest, largest, minimum() or maximum() probably needs a special case. Sometimes the special case can be simple. For example, the start of my operator + has two special cases:<\/p>\n\n\n\n<p><span class=\"has-inline-color has-vivid-purple-color\">if (s1.length( ) == 0)<br>return s2;<br>if (s2.length( ) == 0)<br>return s1;<\/span><br>\u2026now the rest of my code doesn&#8217;t need to worry about s1 or s2 being empty.<\/p>\n\n\n\n<p>4. What strange things happen in the operator * when the scalar is negative?<br><strong>ANSWER<\/strong>: Here&#8217;s an example: Suppose that a statistician x has been given three numbers 10, 20 and 40, where y.minimum() will be 10 and y.maximum() will be 40. Then we execute the statement y = -1*x; The statistician y must act as if it had been given -10, -20 and -40 so y.minimum() will be -40 and y.maximum() will be -10.<\/p>\n\n\n\n<p>5. I&#8217;m having trouble compiling or linking my stats.cxx with statexam.cxx or stattest.cxx<br><strong>ANSWER<\/strong>: Make sure that all the code in your stats.cxx is in the namespace main_savitch_2C (look at the similar example of the point class on page 62). If you still have the compilation problem, send email to your TA for help. When you send messages for the Data Structures course, always remeber to include &#8220;CSC212&#8221; in your Subject line otherwise your messages could be ignored.<\/p>\n\n\n\n<p>6. When I write a friend function, the compiler still won&#8217;t let the function access the private member variables of the statistician. Help!<br><strong>ANSWER<\/strong>: See the the answer to the previous question.<\/p>\n\n\n\n<p>7. Should I worry about warnings that occur when I compile.<br><strong>ANSWER<\/strong>: Yes. At this point of the game, about 60% of warnings are errors. In any case, the TAs will beat you up if your code generates any warnings. Spotting the cause of the warnings is an important part of learning about C++.<\/p>\n\n\n\n<p>8. Should I worry about putting lots of comments in my program.<br><strong>ANSWER<\/strong>: Not much of that is needed until a function gets longer than 10-15 lines.<\/p>\n\n\n\n<p>9. What causes these compilation errors:<br><span class=\"has-inline-color has-vivid-purple-color\">\/\/ Problem 1:<br>s1.length( ) = s2.length( ) + s3.length( );<br>\/\/ You can&#8217;t assign to a function such as length. Try assigning to<br>\/\/ s1.sum (the variable) instead.<\/span><\/p>\n\n\n\n<p><span class=\"has-inline-color has-vivid-purple-color\">\/\/ Problem 2:<br>if (s1.length == s2.length)<br>\/\/ You have to call the function. Try (s1.length() == s2.length()).<\/span><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Computer Science City&nbsp;College of New York&nbsp; CSc 21200&nbsp;Data Structures, Spring 2023 Programming Assignment 1&nbsp; \u2013 Implement and Test the Statistician Class Modified from a Chapter 2 project at www.cs.colorado.edu\/~main\/projects\/of Data&hellip;<\/p>\n","protected":false},"author":3,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"page-templates\/fullwidth.php","meta":{"footnotes":""},"_links":{"self":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/2904"}],"collection":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/comments?post=2904"}],"version-history":[{"count":8,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/2904\/revisions"}],"predecessor-version":[{"id":3114,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/2904\/revisions\/3114"}],"wp:attachment":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/media?parent=2904"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}
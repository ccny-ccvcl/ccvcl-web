{"id":3019,"date":"2023-02-27T13:30:25","date_gmt":"2023-02-27T18:30:25","guid":{"rendered":"http:\/\/ccvcl.org\/?page_id=3019"},"modified":"2023-04-26T22:45:43","modified_gmt":"2023-04-27T02:45:43","slug":"csc212-assignment-5-spring-2023","status":"publish","type":"page","link":"http:\/\/ccvcl.org\/csc212-assignment-5-spring-2023\/","title":{"rendered":"CSc212 Assignment 5 &#8211; Spring 2023"},"content":{"rendered":"\n<p><strong>Computer Science&nbsp;City College of New York<\/strong><br>&nbsp; CSc21200&nbsp;Data Structures&nbsp;Spring 2023<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2 class=\"wp-block-heading\">Programming Assignment 5&nbsp; (Chapter 9) \u2013 Recursive Thinking<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">Adapted from Data Structures and Other Objects Using C++<\/h3>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>by&nbsp;<a href=\"http:\/\/www.cs.colorado.edu\/~main\/\">Michael Main&nbsp;<\/a>and&nbsp;<a href=\"http:\/\/cseweb.ucsd.edu\/users\/savitch\/\">Walter Savitch<\/a><\/strong><\/h3>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<ul><li><strong>The Assignment:<\/strong>&nbsp;You will implement and test four short recursive functions. With the proper use of recursion, none of these function should require more than a dozen lines of code.<\/li><li><strong>Purposes:<\/strong>&nbsp;Ensure that you can write and test small recursive functions.<\/li><li><strong>Before Starting:<\/strong>Read all of Chapter 9, especially Sections 9.1 and 9.3.<\/li><li><strong>Due Date:&nbsp;<\/strong>Thursday, March 30, 2023. If you have problems, late work will be accepted before Friday with no penalties. Late work may be submitted on Saturday or Sunday with 5% penalty per day. No work will be accepted after Sunday.&nbsp;But you are strongly encouraged to work through the problems before the second exam on March 27, 2023.<\/li><li><strong>How to Turn In:<\/strong>&nbsp;Files to be submitted: source code (*.cpp, *.cxx, *.h, see below for details). Please don\u2019t send your excutable files. Please submit your files to&nbsp;<a href=\"mailto:ds.zhu.ccny@gmail.com\">ds.zhu.ccny@gmail.com<\/a>, with the subject line \u201c<strong>CSc212 Assignment 5<\/strong>\u201c.<\/li><li><strong>Files that you must write and turn in:<\/strong>&nbsp;rec_fun.cxx:&nbsp;This file should contain the implementations of the four functions described below. You might also want to put the functions prototypes in a separate file rec_fun.h and write a test program that includes rec_fun.h.<\/li><li><strong>Integrity Policy:&nbsp;<\/strong>Please don\u2019t forget to write your name and ID (last four digits) on top of each of your files (see below for files you need to turn in). Then under your name, please write this statement:&nbsp;<span class=\"has-inline-color has-vivid-green-cyan-color\">\u201cThe work in this assignment is my own. Any outside sources have been properly cited.\u201d<\/span>&nbsp;<span class=\"has-inline-color has-vivid-red-color\">Without writing this statement, you may not be able to get any score<\/span>.<\/li><\/ul>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h4 class=\"wp-block-heading\">1. One Binary Number<\/h4>\n\n\n\n<p>Write a function with this prototype:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">&nbsp; void binary_print(ostream&amp; outs, unsigned int n);<\/pre>\n\n\n\n<p>The function prints the value of n as a BINARY number to the ostream outs. If n is zero, then a single zero is printed; otherwise no leading zeros are printed in the output. The \u2018\\n\u2019 character is NOT printed at the end of the output.<br>EXAMPLES:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">&nbsp; n=0&nbsp; Output:0<br>&nbsp; n=4&nbsp; Output:100<br>&nbsp; n=27 Output:11011<\/pre>\n\n\n\n<p><strong>NOTE: Your recursive implementation must not use any local variables.<\/strong><\/p>\n\n\n\n<h4 class=\"wp-block-heading\">2. Triangle Pattern<\/h4>\n\n\n\n<pre class=\"wp-block-preformatted\">&nbsp; void triangle(ostream&amp; outs, unsigned int m, unsigned int n)<br>&nbsp; \/\/ Precondition: m &lt;= n<br>&nbsp; \/\/ Postcondition: The function has printed a pattern of 2*(n-m+1) lines<br>&nbsp; \/\/ to the output stream outs. The first line contains m asterisks, the next&nbsp;<br>&nbsp; \/\/ line contains m+1 asterisks, and so on up to a line with n asterisks.<br>&nbsp; \/\/ Then the pattern is repeated backwards, going n back down to m.<br>&nbsp; \/* Example output:<br>&nbsp;&nbsp;&nbsp;&nbsp; triangle(cout, 3, 5) will print this to cout:<br>&nbsp;&nbsp;&nbsp;&nbsp; ***<br>&nbsp;&nbsp;&nbsp;&nbsp; ****<br>&nbsp;&nbsp;&nbsp;&nbsp; *****<br>&nbsp;&nbsp;&nbsp;&nbsp; *****<br>&nbsp;&nbsp;&nbsp;&nbsp; ****<br>&nbsp;&nbsp;&nbsp;&nbsp; ***<br>&nbsp; *\/<\/pre>\n\n\n\n<p>Hint: Only one of the arguments changes in the recursive call. Which one?<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">3. Pow Function <\/h4>\n\n\n\n<p>Rewrite the recursive pow function from Fig. 9.10 on page 445, so that the time to compute pow(x,n) is log(n):<\/p>\n\n\n\n<p>&nbsp;&nbsp;&nbsp; double pow(double x, int n);<br>&nbsp;&nbsp;&nbsp; \/\/ Precondition: If x is zero, then n must be positive.<br>&nbsp;&nbsp;&nbsp; \/\/ Postcondition: The value returned is x raised to the power n.<\/p>\n\n\n\n<p><strong>Hint: use the formula x^2n = x^n&nbsp; x^n<\/strong><\/p>\n\n\n\n<p><strong>4.&nbsp; Repeated and Indented Sentences (Project 1, page 450)<\/strong><\/p>\n\n\n\n<p>Write a&nbsp; function that produces output like the following:<\/p>\n\n\n\n<p>This was written by calling number 1.<br>&nbsp; This was written by calling number 2.<br>&nbsp;&nbsp;&nbsp; This was written by calling number 3.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This was written by calling number 4.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This was ALSO written by calling number 4.<br>&nbsp;&nbsp;&nbsp; This was ALSO written by calling number 3.<br>&nbsp; This was ALSO written by calling number 2.<br>This was ALSO written by calling number 1.<\/p>\n\n\n\n<p>In the above example, the recursion stopped when it reached four levels deep, but your function should be capable of continuing any specific level with the following function prototype.<\/p>\n\n\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp; void indented_sentences(size_t m, size_t n);<br>\/\/ precondition: m &lt;=n;<br>\/\/postcondition: print out the above pattern by calling number from m to n<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Computer Science&nbsp;City College of New York&nbsp; CSc21200&nbsp;Data Structures&nbsp;Spring 2023 Programming Assignment 5&nbsp; (Chapter 9) \u2013 Recursive Thinking Adapted from Data Structures and Other Objects Using C++ by&nbsp;Michael Main&nbsp;and&nbsp;Walter Savitch The&hellip;<\/p>\n","protected":false},"author":3,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"page-templates\/fullwidth.php","meta":{"footnotes":""},"_links":{"self":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/3019"}],"collection":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/comments?post=3019"}],"version-history":[{"count":3,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/3019\/revisions"}],"predecessor-version":[{"id":3118,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/3019\/revisions\/3118"}],"wp:attachment":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/media?parent=3019"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}
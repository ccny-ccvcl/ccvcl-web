{"id":2953,"date":"2023-02-06T22:50:30","date_gmt":"2023-02-07T03:50:30","guid":{"rendered":"http:\/\/ccvcl.org\/?page_id=2953"},"modified":"2023-04-26T22:44:36","modified_gmt":"2023-04-27T02:44:36","slug":"csc212-assignment-2-spring-2023","status":"publish","type":"page","link":"http:\/\/ccvcl.org\/csc212-assignment-2-spring-2023\/","title":{"rendered":"CSc212 Assignment 2 &#8211; Spring 2023"},"content":{"rendered":"\n<p><strong>Computer Science&nbsp;City College of New York<\/strong><br>&nbsp; CSc21200&nbsp;Data Structures, Spring 2023<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2 class=\"wp-block-heading\">Programming Assignment 2:<\/h2>\n\n\n\n<h2 class=\"wp-block-heading\">Implement and Test the sequence Class Using a Fixed-Sized Array (Chapter 3)<\/h2>\n\n\n\n<p><strong>Modified from projects of Chapter&nbsp; 3&nbsp; at www.cs.colorado.edu\/~main\/projects\/<\/strong><br><strong>of Data Structures and Other Objects Using C++&nbsp; by Michael Main and Walter Savitch<\/strong><\/p>\n\n\n\n<ul><li><strong>The Assignment:<\/strong>&nbsp;You will implement and test the sequence class using an array to store the sequence\u2019s items.<\/li><li><strong>Purposes:<\/strong>&nbsp;Ensure that you can write a small class that uses an array as a private member variable.Familiarize yourself with the sequence container class (which may also be part of future assignments).Give us a chance to evaluate your programming skills on a small class.<\/li><li><strong>Before Starting:<\/strong>&nbsp;Read all of Chapter 3.<\/li><li><strong>Due Date:<\/strong>&nbsp;Thursday, Feb 16, 2023 before midnight. If you have problems, late work will be accepted before Friday with no penalties. Late work may be submitted on Saturday or Sunday with 5% penalty per day. No work will be accepted after&nbsp;Sunday.<\/li><li><strong>How to Turn In:<\/strong>&nbsp;Files to be submitted: source code (*.cpp, *.cxx, *.h)&nbsp; and the text file (a *.txt file or *.pdf file) showing the running output result of your implementation with the non-interactive test program&nbsp;<a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/sequence_exam.cxx\">sequence_exam.cxx<\/a>&nbsp;(see below). Please don\u2019t send your excutable files. Please submit your files to&nbsp;<a href=\"mailto:ds.zhu.ccny@gmail.com\">ds.zhu.ccny@gmail.com<\/a>, with the subject line \u201c<strong>CSc212 Assignment 2<\/strong>\u201c.<\/li><li><strong>Integrity Policy:&nbsp;<\/strong>Please don\u2019t forget to write your name and ID (last four digits) on top of each of your files (see below for files you need to turn in). Then under your name, please write this statement:&nbsp;\u201cThe work in this assignment is my own. Any outside sources have been properly cited.\u201d&nbsp;Without writing this statement, you will not be able to get any score.<\/li><\/ul>\n\n\n\n<p><strong>Files that you must write and turn in:<\/strong><\/p>\n\n\n\n<ol><li>sequence1.h:&nbsp;The header file for the sequence class. Actually, you don\u2019t have to write much of this file. Just start with&nbsp;<a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/sequence1.h\">our version&nbsp;<\/a>and add your name and other information at the top. Also, decide on appropriate private member variables, an declare these in the sequence class definition at the bottom o the header file If some of your member functions are implemented as inline functions, then you may put those implementations in this file too.<\/li><li>sequence1.cxx:&nbsp;The implementation file for this first sequence class. You will write all of this file, which will have the implementations of all the sequence\u2019s member functions.<\/li><\/ol>\n\n\n\n<p><strong>Other files that you may find helpful:<\/strong><\/p>\n\n\n\n<ol><li><a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/sequence_test.cxx\">sequence_test.cxx<\/a><a href=\"ftp:\/\/ftp.cs.colorado.edu\/pub\/techreports\/main\/programs\/listtest.cxx\">:<\/a>&nbsp;A simple interactive test program.<\/li><li><a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/sequence_exam.cxx\">sequence_exam.cxx:<\/a>&nbsp;A non-interactive test program that will be used to grade the correctness of your sequence class.<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3 class=\"wp-block-heading\">The sequence Class Using a Fixed-Sized Array<br>Discussion of the Assignment<\/h3>\n\n\n\n<p>Many of the features of this class are similar to the&nbsp;<strong>bag<\/strong>&nbsp;class from Section 3.1, so start by thoroughly reading Section 3.1 and pay attention to new features such as&nbsp;<em>static constant members<\/em>&nbsp;and the use of a&nbsp;<em>typedef<\/em>. The sequence class itself is discussed in Section 3.2 of the class text. Notice how the sequence differs from a bag (see page 119). The interactive test program&nbsp;<a href=\"http:\/\/www-cs.engr.ccny.cuny.edu\/~zhu\/CSc212\/Assignments\/sequence_exam.cxx\">sequence_exam.cxx<\/a>&nbsp; is discussed in Section 3.3 of the class text.<\/p>\n\n\n\n<p>Start by declaring the sequence\u2019s private member variables in sequence.h. Then write the invariant of your ADT at the top of sequence1.cxx. The invariant describes precisely how all of your private member variables are used. All of the member functions (except for the constructor) may count on the invariant being true when the member function is activated. And all of the member functions are responsible for ensuring that the invariant is true when the function returns.<\/p>\n\n\n\n<p>As always, do your work in small pieces. For example, my first version of the sequence had only a constructor, start, insert, advance, and current. My other member functions started out as stubs.<\/p>\n\n\n\n<p>Use the interactive test program and a debugger to track down errors in your implementation. If you have an error,&nbsp;<em>do not start making changes until you have identified the cause of the error.<\/em><\/p>\n\n\n\n<p><em>The ability to initialize and use a static member constant within the class definition is a relatively new feature. If you have an older compiler that does not support static const members, then you may use<\/em><\/p>\n\n\n\n<p><em>enum {CAPACITY = 30};<\/em><\/p>\n\n\n\n<p><em>instead of<\/em><\/p>\n\n\n\n<p><em>static const size_type CAPACITY = 30;<\/em><\/p>\n\n\n\n<p><em>After&nbsp; this definition, the name bag::CAPACITY is defined to have the integer value 30. Although this is not the intended use of an enum definition, the result is the same as using a static member constant.<\/em><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Computer Science&nbsp;City College of New York&nbsp; CSc21200&nbsp;Data Structures, Spring 2023 Programming Assignment 2: Implement and Test the sequence Class Using a Fixed-Sized Array (Chapter 3) Modified from projects of Chapter&nbsp;&hellip;<\/p>\n","protected":false},"author":3,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"page-templates\/fullwidth.php","meta":{"footnotes":""},"_links":{"self":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/2953"}],"collection":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/comments?post=2953"}],"version-history":[{"count":3,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/2953\/revisions"}],"predecessor-version":[{"id":3115,"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/pages\/2953\/revisions\/3115"}],"wp:attachment":[{"href":"http:\/\/ccvcl.org\/wp-json\/wp\/v2\/media?parent=2953"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}